---
import fs from 'fs';
import path from 'path';

const GH_OWNER = Astro.props.owner || 'your-org-or-username';
const GH_REPO = Astro.props.repo || 'your-repo-name';
const CACHE_FILE = path.resolve(`./src/cache/${GH_OWNER}-${GH_REPO}-contributors.json`);
const CACHE_TTL = 1000 * 60 * 60 * 24; // 24 hours

async function fetchContributors() {
  const now = Date.now();
  try {
    if (fs.existsSync(CACHE_FILE)) {
      const stats = fs.statSync(CACHE_FILE);
      const age = now - stats.mtimeMs;
      if (age < CACHE_TTL) {
        const cachedData = fs.readFileSync(CACHE_FILE, 'utf-8');
        return JSON.parse(cachedData);
      }
    }
  } catch (e) {
    // Ignore cache read errors
  }

  const response = await fetch(
    `https://api.github.com/repos/${GH_OWNER}/${GH_REPO}/contributors`
  );
  if (!response.ok) {
    throw new Error(`Failed to fetch contributors: ${response.status}`);
  }
  const data = await response.json();
  try {
    fs.mkdirSync(path.dirname(CACHE_FILE), { recursive: true });
    fs.writeFileSync(CACHE_FILE, JSON.stringify(data), 'utf-8');
  } catch (e) {
    // Ignore cache write errors
  }
  return data;
}


const excludeBots = Astro.props.excludeBots === false ? false : true;

let contributors = await fetchContributors();

if (excludeBots) {
  contributors = contributors.filter(
    (contributor) => !/bot/i.test(contributor.login)
  );
}

---

<div class="contributor-grid">
  {contributors.map(contributor => (
    <a
      href={contributor.html_url}
      title={contributor.login}
      target="_blank"
      rel="noopener"
      style="display: inline-block; margin: 8px"
    >
      <img
        src={contributor.avatar_url}
        alt={contributor.login}
        width="48"
        height="48"
        style="border-radius: 50%; border: 2px solid #eee"
      />
      <div style="text-align: center; font-size: 0.9em">
        {contributor.login}
      </div>
    </a>
  ))}
</div>

<style>
.contributor-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  align-items: center;
}
</style>
